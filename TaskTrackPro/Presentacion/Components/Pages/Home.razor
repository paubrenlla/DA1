@page "/"
@using Blazored.LocalStorage
@using Controllers
@using DTOs
@using UserInterface.Data
@inject SessionLogic SessionLogic
@inject NavigationManager NavigationManager
@inject UsuarioController UsuarioController
@inject ILocalStorageService LocalStorage

<PageTitle>Home</PageTitle>

<h1>Bienvenido</h1>

@if (!string.IsNullOrEmpty(mensaje))
{
    <p>@mensaje</p>
}

@if (usuarioModificableDto is not null)
{
    <hr />
    <h3>Editar tu información</h3>

    @if (!string.IsNullOrEmpty(mensajeError))
    {
        <div class="alert alert-danger">@mensajeError</div>
    }

    <form onsubmit="return false">
        <div class="form-group">
            <label for="email">Email</label>
            <input type="text" class="form-control" id="email" @bind="usuarioModificableDto.Email" />
        </div>

        <div class="form-group">
            <label for="nombre">Nombre</label>
            <input type="text" class="form-control" id="nombre" @bind="usuarioModificableDto.Nombre" />
        </div>

        <div class="form-group">
            <label for="apellido">Apellido</label>
            <input type="text" class="form-control" id="apellido" @bind="usuarioModificableDto.Apellido" />
        </div>

        <div class="form-group">
            <label for="contraseña">Contraseña</label>
            <input type="password" class="form-control" id="contraseña" @bind="usuarioModificableDto.Contraseña" />
        </div>

        <div class="form-group">
            <label for="fecha">Fecha de Nacimiento</label>
            <input type="date" class="form-control" id="fecha" @bind="usuarioModificableDto.FechaNacimiento" />
        </div>

        <button class="btn btn-primary mt-2" @onclick="GuardarCambios">Guardar cambios</button>

        <div class="form-group mt-2">
            <button class="btn btn-secondary" @onclick="SetearContraseñaPorDefecto">Contraseña por defecto</button>
            <button class="btn btn-info ml-2" @onclick="GenerarContraseñaAleatoria">Generar contraseña aleatoria</button>
        </div>
    </form>
}

@code {
    private string mensaje = "No hay usuario en sesión";
    private string mensajeError;
    private bool yaRenderice = false;

    private UsuarioConContraseñaDTO? usuarioModificableDto;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!yaRenderice)
        {
            yaRenderice = true;

            bool isUserActive = await SessionLogic.IsUserActive();
            if (!isUserActive)
            {
                NavigationManager.NavigateTo("/Login");
                return;
            }

            UsuarioDTO? usuarioDto = await SessionLogic.GetCurrentUser();
            if (usuarioDto is null)
            {
                NavigationManager.NavigateTo("/Login");
                return;
            }

            usuarioModificableDto = new UsuarioConContraseñaDTO
            {
                Id = usuarioDto.Id,
                Email = usuarioDto.Email,
                Nombre = usuarioDto.Nombre,
                Apellido = usuarioDto.Apellido,
                FechaNacimiento = usuarioDto.FechaNacimiento,
                Contraseña = UsuarioController.DesencriptarContraseña(usuarioDto.Id)
            };

            mensaje = $"Sesión activa: {usuarioModificableDto.Email}";
            StateHasChanged();
        }
    }

    private void GuardarCambios()
    {
        try
        {
            if (usuarioModificableDto is null)
                return;

            UsuarioController.ModificarUsuario(usuarioModificableDto);

            mensaje = "Cambios guardados correctamente.";
            mensajeError = string.Empty;
        }
        catch (Exception ex)
        {
            mensajeError = ex.Message;
        }
    }

    private void SetearContraseñaPorDefecto()
    {
        if (usuarioModificableDto is null)
            return;

        string pwdDefault = UsuarioController.ResetearContraseña(usuarioModificableDto.Id);
        usuarioModificableDto.Contraseña = pwdDefault;
    }

    private void GenerarContraseñaAleatoria()
    {
        if (usuarioModificableDto is null)
            return;

        string randomPwd = UsuarioController.GenerarContraseñaAleatoria(usuarioModificableDto.Id);
        usuarioModificableDto.Contraseña = randomPwd;
    }
}
