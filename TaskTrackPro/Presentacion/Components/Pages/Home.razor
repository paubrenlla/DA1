@page "/"
@using Domain
@using UserInterface.Data
@inject SessionLogic SessionLogic
@inject NavigationManager NavigationManager
@inject DB BaseDeDatos

<PageTitle>Home</PageTitle>

<h1>Bienvenido</h1>

@if (!string.IsNullOrEmpty(mensaje))
{
    <p>@mensaje</p>
}

@if (usuario != null)
{
    <hr />
    <h3>Editar tu información</h3>

    @if (!string.IsNullOrEmpty(mensajeError))
    {
        <div class="alert alert-danger">@mensajeError</div>
    }

    <form onsubmit="return false">
        <div class="form-group">
            <label for="email">Email</label>
            <input type="text" class="form-control" id="email" @bind="emailNuevo" />
        </div>

        <div class="form-group">
            <label for="nombre">Nombre</label>
            <input type="text" class="form-control" id="nombre" @bind="nombreNuevo" />
        </div>

        <div class="form-group">
            <label for="apellido">Apellido</label>
            <input type="text" class="form-control" id="apellido" @bind="apellidoNuevo" />
        </div>

        <div class="form-group">
            <label for="contraseña">Contraseña</label>
            <input type="password" class="form-control" id="contraseña" @bind="contraseñaNuevo" />
        </div>

        <div class="form-group">
            <label for="fecha">Fecha de Nacimiento</label>
            <input type="date" class="form-control" id="fecha" @bind="fechaNueva" />
        </div>

        <button class="btn btn-primary mt-2" @onclick="GuardarCambios">Guardar cambios</button>

        <div class="form-group mt-2">
            <button class="btn btn-secondary" @onclick="SetearContraseñaPorDefecto">Contraseña por defecto</button>
            <button class="btn btn-info ml-2" @onclick="GenerarContraseñaAleatoria">Generar contraseña aleatoria</button>
        </div>
    </form>
}

@code {
    private string mensaje = "No hay usuario en sesión";
    private string mensajeError;
    private bool yaRenderice = false;

    private Usuario? usuario;

    private string emailNuevo;
    private string nombreNuevo;
    private string apellidoNuevo;
    private string contraseñaNuevo;
    private DateTime fechaNueva;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!yaRenderice)
        {
            yaRenderice = true;

            var isUserActive = await SessionLogic.isUserActive();
            if (!isUserActive)
            {
                NavigationManager.NavigateTo("/Login");
            }
            else
            {
                usuario = await SessionLogic.GetCurrentUser();
                mensaje = $"Sesión activa: {usuario.Email}";
                CargarDatosUsuario();
                StateHasChanged();
            }
        }
    }

    private void CargarDatosUsuario()
    {
        emailNuevo = usuario.Email;
        nombreNuevo = usuario.Nombre;
        apellidoNuevo = usuario.Apellido;
        contraseñaNuevo = Usuario.DesencriptarPassword(usuario.Pwd);
        fechaNueva = usuario.FechaNacimiento;
    }

    private void GuardarCambios()
    {
        try
        {
            usuario.Modificar(emailNuevo, nombreNuevo, apellidoNuevo, contraseñaNuevo, fechaNueva);
            mensaje = "Cambios guardados correctamente.";
        }
        catch (Exception ex)
        {
            mensajeError = ex.Message;
        }
    }

    private void SetearContraseñaPorDefecto()
    {
        contraseñaNuevo = Usuario.CONTRASEÑA_DEFAULT;
        usuario.Pwd = contraseñaNuevo;
    }

    private void GenerarContraseñaAleatoria()
    {
        usuario.GenerarContraseñaAleatoria();
        contraseñaNuevo = Usuario.DesencriptarPassword(usuario.Pwd);
    }
}
