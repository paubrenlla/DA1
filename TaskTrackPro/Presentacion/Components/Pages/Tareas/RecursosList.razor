@page "/proyectos/{idProyecto:int}/tareas/{idTarea:int}/recursos"
@using DTOs
@using Controllers
@using Domain
@using Domain.Enums
@using UserInterface.Data
@inject RecursoController Recursos
@inject AsignacionRecursoTareaControllers Asignaciones
@inject UsuarioController Usuarios
@inject TareaController Tareas
@inject SessionLogic SessionLogic
@inject NavigationManager NavigationManager

<h1>
    RecursosNecesarios
</h1>


<div>
    @if (!string.IsNullOrEmpty(mensajeError))
    {
        <div class="alert alert-danger">@mensajeError</div>
    }
    <label for="recursoSelect">Seleccionar Recurso:</label>
    <select id="recursoSelect" @bind="recursoSeleccionadoId">
        <option value="">Seleccione un recurso</option>
        @foreach (var recurso in listaDeRecursosDisponibles)
        {
            <option value="@recurso.Id">@recurso.Nombre</option>
        }
    </select>
</div>

<div>
    <label for="cantidadInput">Cantidad Necesaria:</label>
    <input type="number" id="cantidadInput" @bind="cantidadNecesaria" />
</div>

@if (Tareas.GetEstadoTarea(idTarea) == TipoEstadoTarea.Ejecutandose
     || Tareas.GetEstadoTarea(idTarea) == TipoEstadoTarea.Efectuada)
{
    <button class="btn btn-success" disabled>Agregar Recurso</button>
}
else
{
    <button class="btn btn-success" @onclick="AgregarRecurso">Agregar Recurso</button>
}

<table class="table">
    <thead>
    <tr>
        <th>Nombre</th>
        <th>Tipo</th>
        <th>Descripci√≥n</th>
        <th>Cantidad necesaria</th>
        <th>Cantidad disponible</th>
        <th>En uso</th>
        <th>Se comparten</th>
        <th>Acciones</th>
    </tr>
    </thead>
    <tbody>
    @foreach (AsignacionRecursoTareaDTO recursoNecesario in listaDeRecursosNecesarios)
    {
        RecursoDTO recurso = recursoNecesario.Recurso;
        <tr>
            <td>@recurso.Nombre</td>
            <td>@recurso.Tipo</td>
            <td>@recurso.Descripcion</td>
            <td>@recursoNecesario.Cantidad</td>
            <td>@recurso.CantidadDelRecurso.ToString()</td>
            <td>@recurso.CantidadEnUso.ToString()</td>
            <td>@recurso.SePuedeCompartir</td>
            <td>
                @if (Tareas.GetEstadoTarea(idTarea) == TipoEstadoTarea.Ejecutandose
                          || Tareas.GetEstadoTarea(idTarea) == TipoEstadoTarea.Efectuada)
                {
                    <button class="btn btn-danger btn-sm" disabled>Eliminar</button>
                }
                else
                {
                    <button class="btn btn-danger btn-sm" @onclick="EliminarRecurso">
                        Eliminar
                    </button>
                }
            </td>
        </tr>
    }
    </tbody>
</table>

@code {
    [Parameter]
    public int idProyecto { get; set; }
    
    [Parameter]
    public int idTarea { get; set; }
    
    private List<AsignacionRecursoTareaDTO>? listaDeRecursosNecesarios = new List<AsignacionRecursoTareaDTO>();
    private bool yaVerifiqueSesion = false;
    
    private int recursoSeleccionadoId;
    private int cantidadNecesaria = 1;
    private List<RecursoDTO> listaDeRecursosDisponibles = new List<RecursoDTO>();
    
    private string mensajeError = String.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var isUserActive = await SessionLogic.IsUserActive();
        if (firstRender && !yaVerifiqueSesion)
        {
            if (!isUserActive)
            {
                NavigationManager.NavigateTo("/Login");
            }
            else
            {
                TareaDTO tareaActual = Tareas.BuscarTareaPorId(idTarea);
                listaDeRecursosNecesarios = Asignaciones.GetAsignacionesDeTarea(idTarea);
                StateHasChanged();
            }
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        TareaDTO tareaActual = Tareas.BuscarTareaPorId(idTarea);

        listaDeRecursosDisponibles = Recursos.GetAll();
    }

    private async Task AgregarRecurso()
    {
        mensajeError = string.Empty;
        RecursoDTO recurso = listaDeRecursosDisponibles.FirstOrDefault(r => r.Id == recursoSeleccionadoId);
        
        if (recurso != null && cantidadNecesaria > 0)
        {
            TareaDTO tareaActual = Tareas.BuscarTareaPorId(idTarea);

            AsignacionRecursoTareaDTO asignacionNueva = new AsignacionRecursoTareaDTO
            {
                Recurso = recurso,
                Tarea = tareaActual,
                Cantidad = cantidadNecesaria
            };

            try
            {
                Asignaciones.CrearAsignacionRecursoTarea(asignacionNueva);
            }
            catch(Exception ex)
            {
                mensajeError = ex.Message;
            }
            
            listaDeRecursosNecesarios = Asignaciones.GetAsignacionesDeTarea(idTarea);
            StateHasChanged();
        }
    }

    private async Task EliminarRecurso()
    {
        mensajeError = string.Empty;
        RecursoDTO recurso = listaDeRecursosDisponibles.FirstOrDefault(r => r.Id == recursoSeleccionadoId);
        
        Asignaciones.EliminarRecursoDeTarea(idTarea, recurso.Id);
        
        listaDeRecursosNecesarios = Asignaciones.GetAsignacionesDeTarea(idTarea);
        StateHasChanged();    
    }
}