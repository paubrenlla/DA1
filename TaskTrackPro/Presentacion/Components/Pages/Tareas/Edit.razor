@page "/proyectos/{idProyecto:int}/tareas/{idTarea:int}/editar"
@using Controllers
@using DTOs
@using UserInterface.Data
@inject TareaController TareaController
@inject ProyectoController ProyectoController
@inject UsuarioController UsuarioController
@inject SessionLogic SessionLogic
@inject NavigationManager NavigationManager

<PageTitle>Editar Tarea</PageTitle>

<h1>Editar Tarea</h1>

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger">@mensajeError</div>
}

@if (tareaDto is not null)
{
    <form onsubmit="return false">
        <div class="form-group">
            <label for="titulo">Título</label>
            <input type="text" class="form-control" id="titulo" @bind="tareaDto.Titulo" />
        </div>

        <div class="form-group">
            <label for="descripcion">Descripción</label>
            <input type="text" class="form-control" id="descripcion" @bind="tareaDto.Descripcion" />
        </div>

        <div class="form-group">
            <label for="fechaInicio">Fecha de Inicio</label>
            <input type="date" class="form-control" id="fechaInicio" @bind="tareaDto.FechaInicio" />
        </div>

        <div class="form-group">
            <label>Duración (días : horas)</label>
            <div class="d-flex align-items-center">
                <input type="number" class="form-control me-1" style="width: 80px;" min="0" @bind="dias" />
                <span class="mx-1">:</span>
                <input type="number" class="form-control ms-1" style="width: 80px;" min="0" max="23" @bind="horas" />
            </div>
        </div>

        <button class="btn btn-primary mt-2" @onclick="GuardarCambios">Guardar cambios</button>
    </form>
}
else
{
    <p>Cargando...</p>
}

@code {
    [Parameter] public int idProyecto { get; set; }
    [Parameter] public int idTarea { get; set; }

    private TareaDTO? tareaDto;
    private int dias;
    private int horas;
    private string mensajeError = string.Empty;

    private bool yaVerifiqueSesion = false;
    private UsuarioDTO? usuarioDto;
    private bool esAdminSistema = false;
    private bool esAdminProyecto = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!yaVerifiqueSesion)
        {
            yaVerifiqueSesion = true;

            bool activo = await SessionLogic.IsUserActive();
            if (!activo)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            usuarioDto = await SessionLogic.GetCurrentUser();
            if (usuarioDto is null)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            esAdminSistema  = UsuarioController.EsAdmin(usuarioDto.Id);
            esAdminProyecto = ProyectoController.UsuarioEsAdminEnProyecto(usuarioDto.Id, idProyecto);
            if (!esAdminSistema && !esAdminProyecto)
            {
                NavigationManager.NavigateTo($"/proyectos/{idProyecto}/tareas");
                return;
            }

            try
            {
                tareaDto = TareaController.BuscarTareaPorId(idTarea);
                if (tareaDto is not null)
                {
                    dias  = tareaDto.Duracion.Days;
                    horas = tareaDto.Duracion.Hours;
                }
            }
            catch (Exception ex)
            {
                mensajeError = ex.Message;
            }

            StateHasChanged();
        }
    }

    private void GuardarCambios()
    {
        if (tareaDto is null)
            return;

        mensajeError = string.Empty;

        try
        {
            TimeSpan nuevaDuracion = new TimeSpan(dias, horas, 0, 0);
            tareaDto.Duracion = nuevaDuracion;
            TareaController.ModificarTarea(idTarea, tareaDto);
            NavigationManager.NavigateTo($"/proyectos/{idProyecto}/tareas");
        }
        catch (Exception ex)
        {
            mensajeError = ex.Message;
        }
    }
}
