@page "/proyectos/{idProyecto:int}/tareas/{idTarea:int}/miembros"
@using DTOs
@using Controllers
@using UserInterface.Data

@inject TareaController TareaController
@inject ProyectoController ProyectoController
@inject UsuarioController UsuarioController
@inject SessionLogic SessionLogic
@inject NavigationManager NavigationManager

<h1>Miembros</h1>

@if (listaDeMiembros is not null)
{
    <div class="mb-3" style="width: 300px;">
        <select class="form-select" @bind="usuarioSeleccionadoId">
            <option value="-1">Seleccione un usuario</option>
            @foreach (UsuarioDTO usuario in usuariosDisponibles)
            {
                <option value="@usuario.Id">@usuario.Nombre @usuario.Apellido (@usuario.Email)</option>
            }
        </select>
        <button class="btn btn-success mt-2" @onclick="AgregarMiembro">Agregar</button>
    </div>
    
    <table class="table">
        <thead>
        <tr>
            <th>Email</th>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Fecha de Nacimiento</th>
            <th>Acciones</th>
        </tr>
        </thead>
        <tbody>
        @foreach (UsuarioDTO usuario in listaDeMiembros)
        {
            <tr>
                <td>@usuario.Email</td>
                <td>@usuario.Nombre</td>
                <td>@usuario.Apellido</td>
                <td>@usuario.FechaNacimiento.ToShortDateString()</td>
                <td>
                    <a class="btn btn-success btn-sm" href="proyectos/@idProyecto/tareas/@idTarea/miembros/@usuario.Id/editar">Editar</a>
                    <button class="btn btn-danger btn-sm" @onclick="@(() => EliminarMiembro(usuario))">
                        Eliminar
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>Cargando miembros...</p>
}

@code {
    [Parameter]
    public int idProyecto { get; set; }
    
    [Parameter]
    public int idTarea { get; set; }

    private List<UsuarioDTO>? listaDeMiembros;
    private bool yaVerifiqueSesion = false;
    
    private List<UsuarioDTO> usuariosDisponibles = new();
    private int usuarioSeleccionadoId = -1;
    private ProyectoDTO? proyecto;
    private TareaDTO? tarea;
    
    protected override async Task OnInitializedAsync()
    {
        bool isUserActive = await SessionLogic.IsUserActive();
        if (!isUserActive)
        {
            NavigationManager.NavigateTo($"proyectos/{idProyecto}/tareas/{idTarea}/miembros/");
            return;
        }

        await CargarDatos();
        yaVerifiqueSesion = true;
    }

    private async Task CargarDatos()
    {
        proyecto = ProyectoController.BuscarProyectoPorId(idProyecto);
        tarea = TareaController.BuscarTareaPorId(idTarea);
        
        var miembrosProyecto = ProyectoController.GetMiembrosDeProyecto(idProyecto);
        listaDeMiembros = TareaController.ListarUsuariosDeTarea(idTarea);
        
        if (miembrosProyecto != null && listaDeMiembros != null)
        {
            usuariosDisponibles = miembrosProyecto
                .Where(u => !listaDeMiembros.Any(m => m.Id == u.Id))
                .ToList();
        }
    }

    private async Task AgregarMiembro()
    {
        if (usuarioSeleccionadoId == -1)
            return;

        TareaController.AgregarUsuario(idTarea, usuarioSeleccionadoId); 
        CargarDatos();
        StateHasChanged();
    }

    private async Task EliminarMiembro(UsuarioDTO miembro)
    {
        ProyectoController.EliminarMiembro(miembro.Id, idProyecto);
        CargarDatos();
        StateHasChanged();
    }
}