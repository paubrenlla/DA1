@page "/proyectos/{idProyecto:int}/tareas/{idTarea:int}/miembros"
@using DTOs
@using Controllers
@using UserInterface.Data

@inject TareaController TareaController
@inject ProyectoController ProyectoController
@inject UsuarioController UsuarioController
@inject SessionLogic SessionLogic
@inject NavigationManager NavigationManager

<h1>
    Miembros
</h1>

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger">@mensajeError</div>
}

@if (usuariosDisponibles?.Any() == true)
{
    <div class="d-flex mb-3">
        <select @bind="usuarioSeleccionadoId" class="form-select me-2" style="max-width: 300px;">
            @foreach (UsuarioDTO usuario in usuariosDisponibles)
            {
                <option value="@usuario.Id">@usuario.Nombre @usuario.Apellido (@usuario.Email)</option>
            }
        </select>
        <button class="btn btn-primary" @onclick="AgregarMiembro">Agregar</button>
    </div>
}
else
{
    <p><em>No hay usuarios disponibles para agregar.</em></p>
}

@if (listaDeMiembros is not null)
{
    <table class="table">
        <thead>
        <tr>
            <th>Email</th>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Fecha de Nacimiento</th>
            <th>Acciones</th>
        </tr>
        </thead>
        <tbody>
        @foreach (UsuarioDTO usuario in listaDeMiembros)
        {
            <tr>
                <td>@usuario.Email</td>
                <td>@usuario.Nombre</td>
                <td>@usuario.Apellido</td>
                <td>@usuario.FechaNacimiento.ToShortDateString()</td>
                <td>
                    <button class="btn btn-danger btn-sm" @onclick="@(() => EliminarMiembro(usuario))">
                        Eliminar
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>Cargando miembros...</p>
}

@code {
    [Parameter]
    public int idProyecto { get; set; }
    
    [Parameter]
    public int idTarea { get; set; }

    private List<UsuarioDTO>? listaDeMiembros;
    private bool yaVerifiqueSesion = false;
    
    private List<UsuarioDTO>? usuariosDisponibles;
    private int usuarioSeleccionadoId;
    private ProyectoDTO? proyecto;
    private TareaDTO? tarea;
    private string mensajeError = string.Empty;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !yaVerifiqueSesion)
        {
            yaVerifiqueSesion = true;
            bool isUserActive = await SessionLogic.IsUserActive();
            if (!isUserActive)
            {
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                listaDeMiembros = TareaController.ListarUsuariosDeTarea(idTarea);
                StateHasChanged(); 
            }
        }
    }
    
    protected override async Task OnInitializedAsync()
    {
        bool isUserActive = await SessionLogic.IsUserActive();
        if (!isUserActive)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        proyecto = ProyectoController.BuscarProyectoPorId(idProyecto);
        tarea = TareaController.BuscarTareaPorId(idTarea);
        listaDeMiembros = TareaController.ListarUsuariosDeTarea(idTarea);

        ActualizarUsuariosDisponibles();
    }

    private void ActualizarUsuariosDisponibles()
    {
        List<UsuarioDTO> miembrosActualesTarea = TareaController.ListarUsuariosDeTarea(idTarea);
        List<UsuarioDTO> miembrosProyecto = ProyectoController.GetMiembrosDeProyecto(idProyecto);
        
        // Solo los miembros del proyecto pueden ser asignados a la tarea
        usuariosDisponibles = miembrosProyecto
            .Where(u => !miembrosActualesTarea.Any(m => m.Id == u.Id))
            .ToList();

        if (usuariosDisponibles != null && usuariosDisponibles.Any())
        {
            usuarioSeleccionadoId = usuariosDisponibles.First().Id;
        }
        else
        {
            usuarioSeleccionadoId = -1;
        }
    }

    private void AgregarMiembro()
    {
        mensajeError = string.Empty;
        
        UsuarioDTO usuario = UsuarioController.GetById(usuarioSeleccionadoId);
        if (usuario != null && tarea != null)
        {
            try
            {
                TareaController.AgregarUsuario(idTarea, usuario.Id);
                listaDeMiembros = TareaController.ListarUsuariosDeTarea(idTarea);
                ActualizarUsuariosDisponibles();
                StateHasChanged();
            }
            catch (Exception ex)
            {
                mensajeError = ex.Message;
            }
        }
    }
    
    void EliminarMiembro(UsuarioDTO miembro)
    {
        try
        {
            mensajeError = string.Empty;
            TareaController.EliminarMiembroDeTarea(miembro.Id, idTarea);
            CargarMiembros();
            ActualizarUsuariosDisponibles();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            mensajeError = ex.Message;
        }
    }
    
    void CargarMiembros()
    {
        listaDeMiembros = TareaController.ListarUsuariosDeTarea(idTarea);
    }
}