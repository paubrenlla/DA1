@page "/proyectos/{idProyecto:int}/tareas/{idTarea:int}/miembros"
@using BusinessLogic
@using UserInterface.Data

@inject DB BaseDeDatos
@inject SessionLogic SessionLogic
@inject NavigationManager NavigationManager

<h1>
    Miembros
</h1>

@if (listaDeMiembors is not null)
{
    <div class="mb-3" style="width: 300px;">
        <select class="form-select" @bind="usuarioSeleccionadoId">
            <option value="-1">Seleccione un usuario</option>
            @foreach (Usuario usuario in usuariosDisponibles)
            {
                <option value="@usuario.Id">@usuario.Nombre @usuario.Apellido (@usuario.Email)</option>
            }
        </select>
        <button class="btn btn-success mt-2" @onclick="AgregarMiembro">Agregar</button>
    </div>
    
    <table class="table">
        <thead>
        <tr>
            <th>Email</th>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Fecha de Nacimiento</th>
            <th>Acciones</th>
        </tr>
        </thead>
        <tbody>
        @foreach (Usuario usuario in listaDeMiembors)
        {
            <tr>
                <td>@usuario.Email</td>
                <td>@usuario.Nombre</td>
                <td>@usuario.Apellido</td>
                <td>@usuario.FechaNacimiento.ToShortDateString()</td>
                <td>
                    <a class="btn btn-success btn-sm" href="proyectos/@idProyecto/tareas/@idTarea/miembros/@usuario.Id/editar">Editar</a>
                    <button class="btn btn-danger btn-sm">Eliminar</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>Cargando miembros...</p>
}

@code {
    [Parameter]
    public int idProyecto { get; set; }
    
    [Parameter]
    public int idTarea { get; set; }

    
    private List<Usuario>? listaDeMiembors;
    private bool yaVerifiqueSesion = false;
    
    private List<Usuario> usuariosDisponibles = new();
    private int usuarioSeleccionadoId = -1;
    private Proyecto? proyecto;
    private Tarea? tarea;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !yaVerifiqueSesion)
        {
            bool isUserActive = await SessionLogic.isUserActive();
            if (!isUserActive)
            {
                NavigationManager.NavigateTo($"proyectos/{idProyecto}/tareas/{idTarea}/miembros/");
            }
            else
            {
                proyecto = BaseDeDatos.buscarProyectoPorId(idProyecto);
                tarea = proyecto?.BuscarTareaPorId(idTarea);

                listaDeMiembors = tarea?.UsuariosAsignados;
                ActualizarUsuariosDisponibles();
                yaVerifiqueSesion = true;
                StateHasChanged();
            }
        }
    }
    
    private void ActualizarUsuariosDisponibles()
    {
        if (proyecto is not null && tarea is not null)
        {
            usuariosDisponibles = proyecto.Miembros
                .Where(u => !tarea.UsuariosAsignados.Contains(u))
                .ToList();
        }
    }

    private void AgregarMiembro()
    {
        if (usuarioSeleccionadoId == -1 || proyecto is null || tarea is null)
            return;

        Usuario usuario = BaseDeDatos.buscarUsuarioPorId(usuarioSeleccionadoId);
        if (usuario is not null)
        {
            try
            {
                proyecto.AsignarUsuarioATarea(usuario, tarea);
                ActualizarUsuariosDisponibles();
                StateHasChanged();
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }
}