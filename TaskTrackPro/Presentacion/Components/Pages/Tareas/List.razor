@page "/proyectos/{id:int}/tareas"
@using BusinessLogic
@using BusinessLogic.Enums
@using UserInterface.Data

@inject DB BaseDeDatos
@inject SessionLogic SessionManager
@inject NavigationManager Navigation

<h1>
    Tareas
    <a class="btn btn-success btn-sm" style="float: right; margin-right: 40px;" href="proyectos/@id/tareas/crear">Crear +</a>
</h1>

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger">@mensajeError</div>
}

<table class="table">
    <thead>
    <tr>
        <th>Titulo</th>
        <th>Descripción</th>
        <th>Estado</th>
        <th>Fecha de inicio</th>
        <th>Duración</th>
        <th>Es crítica</th>
        <th>Acciones</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var tarea in tareasDisponibles)
    {
        <tr>
            <td>@tarea.Titulo</td>
            <td>@tarea.Descripcion</td>
            <td>@tarea.EstadoActual.Valor</td>
            <td>@tarea.FechaInicio</td>
            <td>@tarea.Duracion</td>
            <td>@tarea.EsCritica</td>
            <td>
                @if (esAdminSistema || BaseDeDatos.UsuarioEsAdminDelProyecto(usuarioLogueado, proyectoActual))
                {
                    <a class="btn btn-success btn-sm" href="proyectos/@id/tareas/@tarea.Id/editar">Editar</a>
                    <button class="btn btn-primary btn-sm"
                            @onclick="() => AbrirModalEstado(tarea)"
                            disabled="@(!PuedeCambiarEstado(tarea.EstadoActual.Valor))">
                        Editar estado
                    </button>
                    <button class="btn btn-primary btn-sm"
                            @onclick="() => AbrirModalDependencias(tarea)"
                            disabled="@(!PuedeAgregarDependencias(tarea))">
                        Dependencias
                    </button>
                    <a class="btn btn-success btn-sm" href="proyectos/@id/tareas/@tarea.Id/miembros">Ver miembros</a>
                    <a class="btn btn-success btn-sm" href="proyectos/@id/tareas/@tarea.Id/recursos">Recursos necesarios</a>
                    <button class="btn btn-danger btn-sm"
                            @onclick="@(() => EliminarTarea(tarea))"
                            disabled="@(tarea.TareasSucesoras.Count > 0)">
                        Eliminar
                    </button>
                }
                else
                {
                    <button class="btn btn-primary btn-sm"
                            @onclick="() => AbrirModalEstado(tarea)"
                            disabled="@(!PuedeCambiarEstado(tarea.EstadoActual.Valor))">
                        Editar estado
                    </button>
                }
            </td>

        </tr>
    }
    </tbody>
</table>

@code {
    [Parameter]
    public int id { get; set; }
    
    private List<Tarea>? tareasDisponibles = new List<Tarea>();
    private List<Tarea>? tareasDisponiblesParaAgregar = new List<Tarea>();
    
    bool mostrarModalEstado = false;
    Tarea? tareaSeleccionada;
    TipoEstadoTarea nuevoEstado;
    
    bool mostrarModalDependencias = false;
    Tarea? tareaDependenciaSeleccionada;
    int? tareaDependenciaSeleccionadaId = null;
    bool yaVerifiqueSesion = false;
    private bool sesionActiva;
    private string mensajeError = string.Empty;
    private Usuario? usuarioLogueado;
    private bool esAdminSistema;
    Proyecto proyectoActual;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
       
        if (firstRender && !yaVerifiqueSesion)
        {
            try
            {
                sesionActiva = await SessionManager.isUserActive();
                
                if (!sesionActiva)
                {
                    Navigation.NavigateTo("/Login");
                    return;
                }

                usuarioLogueado = await SessionManager.GetCurrentUser();
                
                if (usuarioLogueado != null)
                {
                    proyectoActual = BaseDeDatos.buscarProyectoPorId(id);
                    esAdminSistema = BaseDeDatos.UsuarioEsAdmin(usuarioLogueado);
            
                    if (esAdminSistema || BaseDeDatos.UsuarioEsAdminDelProyecto(usuarioLogueado,proyectoActual))
                    {
                        tareasDisponibles = proyectoActual.TareasAsociadas;
                    }
                    else
                    {
                        tareasDisponibles = proyectoActual.TareasDelUsuario(usuarioLogueado);
                    }
                    
                }
            }
            catch (Exception ex)
            {
                mensajeError = ex.Message;
            }
            finally
            {
                yaVerifiqueSesion = true;
                StateHasChanged();
            }
        }
    }
    
    void CargarTareas()
    {
        tareasDisponibles = BaseDeDatos.buscarProyectoPorId(id).TareasAsociadas;
    }

    
    void EliminarTarea(Tarea tarea)
    {
        var proyecto = BaseDeDatos.buscarProyectoPorId(id);
        proyecto.eliminarTarea(tarea);
        StateHasChanged();
    }


    
    void AbrirModalEstado(Tarea tarea)
    {
        tareaSeleccionada = tarea;
        nuevoEstado = tarea.EstadoActual.Valor;
        mostrarModalEstado = true;
    }

    bool PuedeElegir(TipoEstadoTarea actual, TipoEstadoTarea candidato)
    {
        return actual switch
        {
            TipoEstadoTarea.Pendiente => candidato == TipoEstadoTarea.Ejecutandose,
            TipoEstadoTarea.Ejecutandose => candidato == TipoEstadoTarea.Efectuada,
            _ => false
        };
    }
    
    bool PuedeCambiarEstado(TipoEstadoTarea estado)
    {
        return estado == TipoEstadoTarea.Pendiente || estado == TipoEstadoTarea.Ejecutandose;
    }

    void GuardarEstado()
    {
        if (tareaSeleccionada != null)
        {
            if (nuevoEstado == TipoEstadoTarea.Efectuada)
            {
                tareaSeleccionada.MarcarTareaComoCompletada();
            }
            else if (nuevoEstado == TipoEstadoTarea.Ejecutandose)
            {
                tareaSeleccionada.MarcarTareaComoEjecutandose();
            }
            mostrarModalEstado = false;
            tareaSeleccionada = null;
        }
    }
    
    bool PuedeAgregarDependencias(Tarea tarea)
    {
        return tarea.EstadoActual.Valor == TipoEstadoTarea.Pendiente ||
               tarea.EstadoActual.Valor == TipoEstadoTarea.Bloqueada;
    }
    
    void AbrirModalDependencias(Tarea tarea)
    {
        tareaSeleccionada = tarea;
        tareasDisponiblesParaAgregar = tareasDisponibles
            .Where(t => t.Id != tarea.Id && !tarea.TareasDependencia.Contains(t)).ToList();
        mostrarModalDependencias = true;
    }

    void AgregarDependencia()
    {
        if (tareaSeleccionada != null && tareaDependenciaSeleccionadaId.HasValue)
        {
            Tarea tareaADepender = tareasDisponiblesParaAgregar
                .FirstOrDefault(t => t.Id == tareaDependenciaSeleccionadaId.Value);
        
            if (tareaADepender != null)
            {
                tareaSeleccionada.AgregarDependencia(tareaADepender);
                tareaDependenciaSeleccionadaId = null;
                tareasDisponiblesParaAgregar = tareasDisponibles
                    .Where(t => t.Id != tareaSeleccionada.Id && !tareaSeleccionada.TareasDependencia.Contains(t)).ToList();
            }
        }
    }

    void CerrarModalDependencias()
    {
        mostrarModalDependencias = false;
        tareaSeleccionada = null;
        tareaDependenciaSeleccionada = null;
    }
}

@if (mostrarModalEstado)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Modificar estado</h5>
                    <button type="button" class="btn-close" @onclick="() => mostrarModalEstado = false"></button>
                </div>
                <div class="modal-body">
                    <InputRadioGroup @bind-Value="nuevoEstado">
                        @foreach (TipoEstadoTarea estado in Enum.GetValues(typeof(TipoEstadoTarea)))
                        {
                            if (tareaSeleccionada != null && PuedeElegir(tareaSeleccionada.EstadoActual.Valor, estado))
                            {
                                <div class="form-check">
                                    <InputRadio class="form-check-input" Value="@estado" />
                                    <label class="form-check-label">@estado</label>
                                </div>
                            }
                        }
                    </InputRadioGroup>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="() => mostrarModalEstado = false">Cancelar</button>
                    <button class="btn btn-primary" @onclick="GuardarEstado">Guardar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (mostrarModalDependencias)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Dependencias de la tarea: @tareaSeleccionada?.Titulo</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalDependencias"></button>
                </div>
                <div class="modal-body">
                    <h6>Tareas de las que depende:</h6>
                    @if (tareaSeleccionada?.TareasDependencia?.Any() == true) 
                    {
                        <ul class="list-group mb-3">
                            @foreach (Tarea dep in tareaSeleccionada.TareasDependencia)
                        {
                            <li class="list-group-item">@dep.Titulo</li>
                        }
                        </ul>
                    }
                    else
                    {
                        <div class="alert alert-info">Esta tarea no depende de ninguna otra.</div>
                    }

                    <h6>Agregar nueva dependencia</h6>
                    @if (tareasDisponiblesParaAgregar.Any())
                    {
                        <div class="input-group mb-3">
                            <select class="form-select" @bind="tareaDependenciaSeleccionadaId">
                                <option value="">-- Seleccionar tarea --</option>
                                @foreach (Tarea tarea in tareasDisponiblesParaAgregar)
                                {
                                    <option value="@tarea.Id">@tarea.Titulo</option>
                                }
                            </select>
                            <button class="btn btn-outline-primary" @onclick="AgregarDependencia">Agregar</button>
                        </div>
                    }
                    else
                    {
                        <div class="alert alert-secondary">No hay tareas disponibles para agregar como dependencia.</div>
                    }
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CerrarModalDependencias">Cerrar</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

