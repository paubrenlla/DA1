@page "/proyectos/{id:int}/tareas"
@using Controllers
@using DTOs
@using UserInterface.Data
@inject TareaController TareaController
@inject ProyectoController ProyectoController
@inject UsuarioController UsuarioController
@inject SessionLogic SessionLogic
@inject NavigationManager Navigation

<h1>Tareas</h1>

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger">@mensajeError</div>
}

<table class="table">
    <thead>
        <tr>
            <th>Título</th>
            <th>Descripción</th>
            <th>Estado</th>
            <th>Fecha de inicio</th>
            <th>Duración</th>
            <th>Es crítica</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var tarea in tareasDto)
        {
            <tr>
                <td>@tarea.Titulo</td>
                <td>@tarea.Descripcion</td>
                <td>@tarea.Estado</td>
                <td>@tarea.FechaInicio</td>
                <td>@tarea.Duracion</td>
                <td>@(tarea.EsCritica ? "Sí" : "No")</td>
                <td>
                    @if (esAdminSistema || esAdminProyecto)
                    {
                        <a class="btn btn-success btn-sm" href="/proyectos/@id/tareas/@tarea.Id/editar">Editar</a>
                        <a class="btn btn-info btn-sm" href="/proyectos/@id/tareas/@tarea.Id/miembros">Miembros</a>
                        <a class="btn btn-warning btn-sm" href="/proyectos/@id/tareas/@tarea.Id/recursos">Recursos</a>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarTarea(tarea.Id)" 
                                disabled="@TareaController.TieneSucesoras(tarea)">
                            Eliminar
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-primary btn-sm"
                                @onclick="() => AbrirModalEstado(tarea.Id)"
                                disabled="@(!PuedeCambiarEstado(tarea.Estado))">
                            Editar estado
                        </button>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@* Modales omitidos para brevedad; se llamarían a TareaController para actualizar estado o agregar dependencias *@

@code {
    [Parameter] public int id { get; set; }

    private List<TareaDTO> tareasDto = new List<TareaDTO>();
    private string mensajeError = string.Empty;
    private bool esAdminSistema = false;
    private bool esAdminProyecto = false;
    private UsuarioDTO? usuarioDto;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            bool activo = await SessionLogic.IsUserActive();
            if (!activo)
            {
                Navigation.NavigateTo("/login");
                return;
            }

            usuarioDto = await SessionLogic.GetCurrentUser();
            if (usuarioDto is null)
            {
                Navigation.NavigateTo("/login");
                return;
            }

            esAdminSistema = UsuarioController.EsAdmin(usuarioDto.Id);
            esAdminProyecto = ProyectoController.UsuarioEsAdminEnProyecto(usuarioDto.Id, id);

            List<TareaDTO> todas = TareaController.ListarTareasPorProyecto(id);

            if (esAdminSistema || esAdminProyecto)
            {
                tareasDto = todas;
            }
            else
            {
                tareasDto = todas.Where(t => TareaController.UsuarioPerteneceALaTarea(usuarioDto.Id, t.Id)).ToList();
            }
        }
        catch (Exception ex)
        {
            mensajeError = ex.Message;
        }
    }

    private void EliminarTarea(int tareaId)
    {
        try
        {
            TareaController.EliminarTarea(tareaId);
            tareasDto = TareaController.ListarTareasPorProyecto(id);
        }
        catch (Exception ex)
        {
            mensajeError = ex.Message;
        }
    }

    private void AbrirModalEstado(int tareaId)
    {
        // Por simplicidad, mostrar modal de estado y luego:
        // TareaController.MarcarComoEjecutandose(tareaId) o
        // TareaController.MarcarComoCompletada(tareaId)
    }

    private bool PuedeCambiarEstado(string estado)
    {
        return estado == "Pendiente" || estado == "Ejecutándose";
    }
}
