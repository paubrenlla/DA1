@page "/usuarios/crear"
@using Controllers
@using DTOs
@using UserInterface.Data
@inject SessionLogic SessionLogic
@inject UsuarioController UsuarioController
@inject NavigationManager NavigationManager

<PageTitle>Crear Usuario</PageTitle>

<h1>Crear Usuario</h1>

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger">@mensajeError</div>
}

<form onsubmit="return false">
    <div class="form-group">
        <label for="email">Email</label>
        <input type="text" class="form-control" id="email" @bind="email" />
    </div>

    <div class="form-group">
        <label for="nombre">Nombre</label>
        <input type="text" class="form-control" id="nombre" @bind="nombre" />
    </div>

    <div class="form-group">
        <label for="apellido">Apellido</label>
        <input type="text" class="form-control" id="apellido" @bind="apellido" />
    </div>

    <div class="form-group">
        <label for="contraseña">Contraseña</label>
        <input type="password" class="form-control" id="contraseña" @bind="contraseña" />
    </div>

    <div class="form-group">
        <label for="fecha">Fecha de Nacimiento</label>
        <input type="date" class="form-control" id="fecha" @bind="fecha" />
    </div>

    <button class="btn btn-primary" @onclick="CrearUsuario">Agregar</button>
</form>

@code {
    private string email;
    private string nombre;
    private string apellido;
    private string contraseña;
    private DateTime fecha = DateTime.Today;
    private string mensajeError = string.Empty;

    private bool yaVerifiqueSesion  = false;
    private UsuarioDTO? usuarioLogeadoDto;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!yaVerifiqueSesion)
        {
            yaVerifiqueSesion = true;

            bool sesionActiva = await SessionLogic.IsUserActive();
            if (!sesionActiva)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            usuarioLogeadoDto = await SessionLogic.GetCurrentUser();
            if (usuarioLogeadoDto is null)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            bool esAdmin = UsuarioController.EsAdmin(usuarioLogeadoDto);
            if (!esAdmin)
            {
                NavigationManager.NavigateTo("/");
                return;
            }

            StateHasChanged();
        }
    }

    private void CrearUsuario()
    {
        mensajeError = string.Empty;

        try
        {
            var nuevoDto = new UsuarioConContraseñaDTO
            {
                Email           = email,
                Nombre          = nombre,
                Apellido        = apellido,
                FechaNacimiento = fecha,
                Contraseña      = contraseña
            };

            UsuarioController.CrearUsuario(nuevoDto);
            NavigationManager.NavigateTo("/usuarios");
        }
        catch (Exception ex)
        {
            mensajeError = ex.Message;
        }
    }
}
