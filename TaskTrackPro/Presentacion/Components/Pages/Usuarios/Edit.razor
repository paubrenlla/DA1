@page "/usuarios/{id:int}/editar"
@using Controllers
@using DTOs
@using UserInterface.Data
@inject SessionLogic SessionLogic
@inject UsuarioController UsuarioController
@inject NavigationManager NavigationManager

<PageTitle>Editar Usuario</PageTitle>

<h1>Editar Usuario</h1>

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger">@mensajeError</div>
}

@if (usuarioConDto is not null)
{
    <form onsubmit="return false">
        <div class="form-group">
            <label for="email">Email</label>
            <input type="text" class="form-control" id="email" @bind="usuarioConDto.Email" />
        </div>

        <div class="form-group">
            <label for="nombre">Nombre</label>
            <input type="text" class="form-control" id="nombre" @bind="usuarioConDto.Nombre" />
        </div>

        <div class="form-group">
            <label for="apellido">Apellido</label>
            <input type="text" class="form-control" id="apellido" @bind="usuarioConDto.Apellido" />
        </div>

        <div class="form-group">
            <label for="contraseña">Contraseña</label>
            <input type="password" class="form-control" id="contraseña" @bind="usuarioConDto.Contraseña" />
        </div>

        <div class="form-group">
            <label for="fecha">Fecha de Nacimiento</label>
            <input type="date" class="form-control" id="fecha" @bind="usuarioConDto.FechaNacimiento" />
        </div>

        @if (!UsuarioController.EsAdmin(usuarioConDto.Id))
        {
            <button class="btn btn-warning mt-3" @onclick="ConcederPrivilegios">
                Conceder privilegios del sistema
            </button>
        }

        <button class="btn btn-primary mt-3" @onclick="GuardarCambios">
            Guardar cambios
        </button>

        <div class="form-group mt-2">
            <button class="btn btn-secondary" @onclick="SetearContraseñaPorDefecto">
                Contraseña por defecto
            </button>
            <button class="btn btn-info ml-2" @onclick="GenerarContraseñaAleatoria">
                Generar contraseña aleatoria
            </button>
        </div>
    </form>
}
else
{
    <p>Cargando…</p>
}

@code {
    [Parameter]
    public int id { get; set; }

    private UsuarioConContraseñaDTO? usuarioConDto;
    private UsuarioDTO? usuarioLogeadoDto;
    private bool esAdminSistema;
    private bool yaVerifiqueSesion = false;
    private string mensajeError = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!yaVerifiqueSesion)
        {
            yaVerifiqueSesion = true;

            bool sesionActiva = await SessionLogic.IsUserActive();
            if (!sesionActiva)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            usuarioLogeadoDto = await SessionLogic.GetCurrentUser();
            if (usuarioLogeadoDto is null)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            esAdminSistema = UsuarioController.EsAdmin(usuarioLogeadoDto.Id);
            if (!esAdminSistema)
            {
                NavigationManager.NavigateTo("/");
                return;
            }

            UsuarioDTO usuarioDto = UsuarioController.GetById(id);
            string pwdPlano = UsuarioController.DesencriptarContraseña(id);

            usuarioConDto = new UsuarioConContraseñaDTO
            {
                Id              = usuarioDto.Id,
                Email           = usuarioDto.Email,
                Nombre          = usuarioDto.Nombre,
                Apellido        = usuarioDto.Apellido,
                FechaNacimiento = usuarioDto.FechaNacimiento,
                Contraseña      = pwdPlano
            };

            StateHasChanged();
        }
    }

    private void GuardarCambios()
    {
        if (usuarioConDto is null)
            return;

        try
        {
            UsuarioController.ModificarUsuario(usuarioConDto);
            NavigationManager.NavigateTo("/usuarios");
        }
        catch (Exception ex)
        {
            mensajeError = ex.Message;
        }
    }

    private void ConcederPrivilegios()
    {
        if (usuarioConDto is null)
            return;

        try
        {
            UsuarioController.ConvertirEnAdmin(usuarioConDto.Id);
            esAdminSistema = true;
        }
        catch (Exception ex)
        {
            mensajeError = ex.Message;
        }
    }

    private void SetearContraseñaPorDefecto()
    {
        if (usuarioConDto is null)
            return;

        try
        {
            string pwdDefault = UsuarioController.ResetearContraseña(usuarioConDto.Id);
            usuarioConDto.Contraseña = UsuarioController.DesencriptarContraseña(usuarioConDto.Id);
        }
        catch (Exception ex)
        {
            mensajeError = ex.Message;
        }
    }

    private void GenerarContraseñaAleatoria()
    {
        if (usuarioConDto is null)
            return;

        try
        {
            string nuevaHash = UsuarioController.GenerarContraseñaAleatoria(usuarioConDto.Id);
            usuarioConDto.Contraseña = UsuarioController.DesencriptarContraseña(usuarioConDto.Id);
        }
        catch (Exception ex)
        {
            mensajeError = ex.Message;
        }
    }
}
