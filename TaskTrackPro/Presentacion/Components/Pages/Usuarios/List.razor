@page "/usuarios"
@using BusinessLogic
@using UserInterface.Data

@inject DB BaseDeDatos
@inject SessionLogic SessionLogic
@inject NavigationManager NavigationManager

<h1>
    Usuarios
    <a class="btn btn-success btn-sm" style="float: right; margin-right: 40px;" href="/usuarios/crear">Crear +</a>
</h1>

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger">@mensajeError</div>
}

@if (listaDeUsuarios is not null)
{
    <table class="table">
        <thead>
        <tr>
            <th>Email</th>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Fecha de Nacimiento</th>
            <th>Acciones</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var usuario in listaDeUsuarios)
        {
            <tr>
                <td>@usuario.Email</td>
                <td>@usuario.Nombre</td>
                <td>@usuario.Apellido</td>
                <td>@usuario.FechaNacimiento.ToShortDateString()</td>
                <td>
                    <a class="btn btn-success btn-sm" href="usuarios/@usuario.Id/editar/">Editar</a>
                    <button class="btn btn-danger btn-sm" @onclick="() => EliminarUsuario(usuario.Id)">Eliminar</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>Cargando usuarios...</p>
}

@code {
    private List<Usuario>? listaDeUsuarios;
    private bool yaVerifiqueSesion = false;
    private string mensajeError = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !yaVerifiqueSesion)
        {
            var isUserActive = await SessionLogic.isUserActive();
            if (!isUserActive)
            {
                NavigationManager.NavigateTo("/Login");
            }
            else
            {
                listaDeUsuarios = BaseDeDatos.ListaUsuarios;
                yaVerifiqueSesion = true;
                StateHasChanged(); 
            }
        }
    }

    private void EliminarUsuario(int id)
    {
        try
        {
            mensajeError = string.Empty;
            Usuario usuarioAEliminar = BaseDeDatos.buscarUsuarioPorId(id);
            BaseDeDatos.eliminarUsuario(usuarioAEliminar);
            listaDeUsuarios = BaseDeDatos.ListaUsuarios;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al eliminar usuario: {ex.Message}";
        }
    }
}
