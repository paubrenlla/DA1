@page "/usuarios"
@using Controllers
@using DTOs
@using UserInterface.Data
@inject UsuarioController UsuarioController
@inject SessionLogic SessionLogic
@inject NavigationManager NavigationManager

<h1>
    Usuarios
    <a class="btn btn-success btn-sm" style="float: right; margin-right: 40px;" href="/usuarios/crear">Crear +</a>
</h1>

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger">@mensajeError</div>
}

@if (listaUsuariosDto is not null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Email</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Fecha de Nacimiento</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (UsuarioDTO usuario in listaUsuariosDto)
            {
                <tr>
                    <td>@usuario.Email</td>
                    <td>@usuario.Nombre</td>
                    <td>@usuario.Apellido</td>
                    <td>@usuario.FechaNacimiento.ToShortDateString()</td>
                    <td>
                        <a class="btn btn-success btn-sm" href="usuarios/@usuario.Id/editar">Editar</a>
                        <button class="btn btn-danger btn-sm" @onclick="() => EliminarUsuario(usuario)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Cargando usuarios...</p>
}

@code {
    private List<UsuarioDTO>? listaUsuariosDto;
    private bool yaVerifiqueSesion = false;
    private string mensajeError = string.Empty;
    private UsuarioDTO? usuarioLogeadoDto;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !yaVerifiqueSesion)
        {
            bool sesionActiva = await SessionLogic.IsUserActive();
            if (!sesionActiva)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            usuarioLogeadoDto = await SessionLogic.GetCurrentUser();
            if (usuarioLogeadoDto is null)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            bool esAdmin = UsuarioController.EsAdmin(usuarioLogeadoDto);
            if (!esAdmin)
            {
                NavigationManager.NavigateTo("/");
                return;
            }

            listaUsuariosDto = UsuarioController.GetAll();
            yaVerifiqueSesion = true;
            StateHasChanged();
        }
    }

    private void EliminarUsuario(UsuarioDTO usuario)
    {
        try
        {
            mensajeError = string.Empty;
            UsuarioController.EliminarUsuario(usuario);
            listaUsuariosDto = UsuarioController.GetAll();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al eliminar usuario: {ex.Message}";
        }
    }
}
