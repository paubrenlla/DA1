@page "/recursos/crear/"

<PageTitle>Crear Recurso</PageTitle>

@using Controllers
@using DTOs
@using UserInterface.Data
@inject RecursoController Recursos
@inject UsuarioController Usuarios
@inject NavigationManager NavigationManager
@inject SessionLogic SessionLogic

<h1>Crear Recurso</h1>

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger">@mensajeError</div>
}

<form onsubmit="return false">
    <div class="form-group">
        <label for="nombre">Nombre</label>
        <input type="text" class="form-control" id="nombre" @bind="nombre">
    </div>

    <div class="form-group">
        <label for="tipo">Tipo</label>
        <input type="text" class="form-control" id="tipo" @bind="tipo">
    </div>

    <div class="form-group">
        <label for="descripcion">Descripción</label>
        <input type="text" class="form-control" id="descripcion" @bind="descripcion">
    </div>

    <div class="form-group">
        <label for="cantidadRecurso">Cantidad del recurso</label>
        <input type="number" class="form-control" id="cantidadRecurso" @bind="cantidad">
    </div>

    <div class="form-check">
        <input type="checkbox" class="form-check-input" id="compartir" @bind="compartir">
        <label class="form-check-label" for="compartir">Se puede compartir</label>
    </div>


    <input type="submit" class="btn btn-primary" value="Guardar cambios" @onclick="Crear_Recurso">
</form>

@code {
    [Parameter]
    public int id { get; set; }

    private string nombre;
    private string tipo;
    private string descripcion;
    private int cantidad;
    private bool compartir;
    private string mensajeError;

    RecursoDTO recursoACambiar;
    private bool yaVerifiqueSesion = false;
    UsuarioDTO usuarioLogeado;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!yaVerifiqueSesion)
        {
            yaVerifiqueSesion = true;

            var activo = await SessionLogic.IsUserActive();
            if (!activo)
            {
                NavigationManager.NavigateTo("/Login");
                return;
            }
            usuarioLogeado = await SessionLogic.GetCurrentUser();
            if (!Usuarios.EsAdmin(usuarioLogeado))
            {
                NavigationManager.NavigateTo("/");
            }

            StateHasChanged();
        }
    }

    private void Crear_Recurso()
    {
        mensajeError = "";

        try
        {
            RecursoDTO recursoNuevo = new RecursoDTO
            {
                Nombre = nombre,
                Tipo = tipo,
                Descripcion = descripcion,
                SePuedeCompartir = compartir,
                CantidadDelRecurso = cantidad
            };

            Recursos.Add(recursoNuevo);
            NavigationManager.NavigateTo("/recursos");
        }
        catch (Exception ex)
        {
            mensajeError = ex.Message;
        }
    }

}