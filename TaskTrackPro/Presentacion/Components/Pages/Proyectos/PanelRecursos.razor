@page "/proyectos/{idProyecto:int}/panel_recursos"
@using Controllers
@using DTOs
@using Microsoft.IdentityModel.Tokens
@using UserInterface.Data
@inject ProyectoController Proyectos
@inject AsignacionRecursoTareaControllers Asignaciones
@inject TareaController Tareas
@inject UsuarioController Usuarios
@inject RecursoController Recursos
@inject SessionLogic SessionLogic
@inject NavigationManager NavigationManager

<h3>Panel de Recursos - @nombreProyecto</h3>

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger">@mensajeError</div>
}
else if (!asignacionesDelProyecto.IsNullOrEmpty())
{
    <!-- Resumen general -->
    <div class="card mb-4">
        <div class="card-header">
            <h5>Resumen de Recursos</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <div class="text-center">
                        <h6 class="text-primary">Total Recursos</h6>
                        <h4>@recursosDelProyecto.Count</h4>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="text-center">
                        <h6 class="text-success">Disponibles</h6>
                        <h4>@recursosDisponibles.Count</h4>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="text-center">
                        <h6 class="text-warning">En Máxima Capacidad</h6>
                        <h4>@recursosConSobreutilizacion.Count</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Panel detallado por recurso -->
    <div class="accordion" id="accordionRecursos">
        @foreach (var recurso in recursosDelProyecto)
        {
            var asignacionesRecurso = asignacionesDelProyecto.Where(a => a.Recurso.Id == recurso.Id).ToList();
            var nivelUso = CalcularNivelUso(recurso, asignacionesRecurso);
            
            <div class="accordion-item">
                <h2 class="accordion-header" id="heading@(recurso.Id)">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" 
                            data-bs-target="#collapse@(recurso.Id)" aria-expanded="false" 
                            aria-controls="collapse@(recurso.Id)">
                        <div class="d-flex justify-content-between w-100 me-3">
                            <div>
                                <strong>@recurso.Nombre</strong>
                                <small class="text-muted ms-2">(@recurso.Tipo)</small>
                            </div>
                            <div class="d-flex align-items-center">
                                <!-- Indicador de estado -->
                                @if (nivelUso >= 100)
                                {
                                    <span class="badge bg-warning me-2">Máxima Capacidad</span>
                                }
                                else if (nivelUso >= 80)
                                {
                                    <span class="badge bg-info me-2">Alto Uso</span>
                                }
                                else
                                {
                                    <span class="badge bg-success me-2">Disponible</span>
                                }
                                
                                <!-- Barra de uso -->
                                <div class="progress" style="width: 100px; height: 20px;">
                                    <div class="progress-bar @GetColorClaseUso(nivelUso)" 
                                         role="progressbar" 
                                         style="width: @(Math.Min(nivelUso, 100))%" 
                                         aria-valuenow="@nivelUso" 
                                         aria-valuemin="0" 
                                         aria-valuemax="100">
                                        @nivelUso.ToString("F0")%
                                    </div>
                                </div>
                            </div>
                        </div>
                    </button>
                </h2>
                <div id="collapse@(recurso.Id)" class="accordion-collapse collapse" 
                     aria-labelledby="heading@(recurso.Id)" data-bs-parent="#accordionRecursos">
                    <div class="accordion-body">
                        <!-- Información del recurso -->
                        <div class="row mb-3">
                            <div class="col-md-6">
                                <p><strong>Capacidad Total:</strong> @recurso.CantidadDelRecurso</p>
                                <p><strong>Cantidad Asignada:</strong> @asignacionesRecurso.Sum(a => a.Cantidad)</p>
                                <p><strong>Disponible:</strong> @(recurso.CantidadDelRecurso - asignacionesRecurso.Sum(a => a.Cantidad))</p>
                            </div>
                            <div class="col-md-6">
                                <p><strong>Nivel de Uso:</strong> @nivelUso.ToString("F1")%</p>
                                <p><strong>Estado:</strong> 
                                    @if (nivelUso >= 100)
                                    {
                                        <span class="text-warning">Máxima Capacidad</span>
                                    }
                                    else
                                    {
                                        <span class="text-success">Disponible</span>
                                    }
                                </p>
                            </div>
                        </div>

                        <!-- Timeline de uso -->
                        <h6>Cronograma de Uso:</h6>
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Tarea</th>
                                        <th>Fecha Inicio</th>
                                        <th>Fecha Fin</th>
                                        <th>Cantidad</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var asignacion in asignacionesRecurso.OrderBy(a => a.Tarea.EarlyStart))
                                    {
                                        var tarea = tareasDelProyecto.FirstOrDefault(t => t.Id == asignacion.Tarea.Id);
                                        <tr>
                                            <td>@(tarea?.Titulo ?? "Tarea no encontrada")</td>
                                            <td>@asignacion.Tarea.EarlyStart.ToString("dd/MM/yyyy")</td>
                                            <td>@asignacion.Tarea.EarlyFinish.ToString("dd/MM/yyyy")</td>
                                            <td>@asignacion.Cantidad</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="alert alert-info">
        <p>Este proyecto no tiene recursos asignados a tareas.</p>
        <a href="/proyectos/@idProyecto/tareas" class="btn btn-primary">Gestionar Tareas</a>
    </div>
}

@code {
    [Parameter] public int idProyecto { get; set; }

    private List<AsignacionRecursoTareaDTO> asignacionesDelProyecto = new();
    private List<RecursoDTO> recursosDelProyecto = new();
    private List<TareaDTO> tareasDelProyecto = new();
    private List<RecursoDTO> recursosDisponibles = new();
    private List<RecursoDTO> recursosConSobreutilizacion = new();

    private string mensajeError = string.Empty;
    private string nombreProyecto = string.Empty;
    private bool yaVerifiqué = false;
    private UsuarioDTO usuarioActivo;

    private DateTime filtroFechaInicio = DateTime.Today;
    private DateTime filtroFechaFin = DateTime.Today.AddMonths(1);

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!yaVerifiqué)
        {
            yaVerifiqué = true;
            if (!await SessionLogic.IsUserActive() 
                && (!Usuarios.EsAdmin(SessionLogic.GetCurrentUser().Id) 
                    || Proyectos.UsuarioEsAdminEnProyecto(SessionLogic.GetCurrentUser().Id, idProyecto)))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }
            try
            {
                await CargarDatosPanel();
                AnalizarRecursos();
            }
            catch (Exception ex)
            {
                mensajeError = ex.Message;
            }

            StateHasChanged();
        }
    }

    private async Task CargarDatosPanel()
    {
        var proyecto = Proyectos.BuscarProyectoPorId(idProyecto);
        nombreProyecto = proyecto?.Nombre ?? "Proyecto";

        var tareasDeProyecto = Tareas.ListarTareasPorProyecto(idProyecto);

        asignacionesDelProyecto.Clear();
    
        foreach (var tarea in tareasDeProyecto)
        {
            var asignacionesTarea = Asignaciones.GetAsignacionesDeTarea(tarea.Id);
            if (asignacionesTarea != null && asignacionesTarea.Any())
            {
                asignacionesDelProyecto.AddRange(asignacionesTarea);
            }
        }
    
        tareasDelProyecto = Tareas.ListarTareasPorProyecto(idProyecto);

        var recursosIds = asignacionesDelProyecto.Select(a => a.Recurso.Id).Distinct();
        recursosDelProyecto = new List<RecursoDTO>();
    
        foreach (var recursoId in recursosIds)
        {
            var recurso = Recursos.GetById(recursoId);
            if (recurso != null)
                recursosDelProyecto.Add(recurso);
        }
    }

    private void AnalizarRecursos()
    {
        recursosDisponibles = new List<RecursoDTO>();
        recursosConSobreutilizacion = new List<RecursoDTO>();

        foreach (var recurso in recursosDelProyecto)
        {
            var asignacionesRecurso = asignacionesDelProyecto.Where(a => a.Recurso.Id == recurso.Id).ToList();
            var nivelUso = CalcularNivelUso(recurso, asignacionesRecurso);

            if (nivelUso >= 100)
            {
                recursosConSobreutilizacion.Add(recurso);
            }
            else
            {
                recursosDisponibles.Add(recurso);
            }
        }
    }

    private double CalcularNivelUso(RecursoDTO recurso, List<AsignacionRecursoTareaDTO> asignaciones)
    {
        if (recurso.CantidadDelRecurso == 0) return 0;
        
        var cantidadUsada = asignaciones.Sum(a => a.Cantidad);
        return (double)cantidadUsada / recurso.CantidadDelRecurso * 100;
    }

    private string GetColorClaseUso(double nivelUso)
    {
        return nivelUso switch
        {
            >= 100 => "bg-warning",
            >= 80 => "bg-info",
            >= 60 => "bg-info",
            _ => "bg-success"
        };
    }
}