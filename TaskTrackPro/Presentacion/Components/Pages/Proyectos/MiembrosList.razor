@page "/proyectos/{id:int}/miembros"
@using BusinessLogic
@using UserInterface.Data

@inject DB BaseDeDatos
@inject SessionLogic SessionLogic
@inject NavigationManager NavigationManager

<h1>
    Miembros
</h1>

@if (usuariosDisponibles?.Any() == true)
{
    <div class="d-flex mb-3">
        <select @bind="usuarioSeleccionadoId" class="form-select me-2" style="max-width: 300px;">
            @foreach (Usuario usuario in usuariosDisponibles)
            {
                <option value="@usuario.Id">@usuario.Nombre @usuario.Apellido (@usuario.Email)</option>
            }
        </select>
        <button class="btn btn-primary" @onclick="AgregarMiembro">Agregar</button>
    </div>
}
else
{
    <p><em>No hay usuarios disponibles para agregar.</em></p>
}

@if (listaDeMiembors is not null)
{
    <table class="table">
        <thead>
        <tr>
            <th>Email</th>
            <th>Nombre</th>
            <th>Apellido</th>
            <th>Fecha de Nacimiento</th>
            <th>Acciones</th>
        </tr>
        </thead>
        <tbody>
        @foreach (Usuario usuario in listaDeMiembors)
        {
            <tr>
                <td>@usuario.Email</td>
                <td>@usuario.Nombre</td>
                <td>@usuario.Apellido</td>
                <td>@usuario.FechaNacimiento.ToShortDateString()</td>
                <td>
                    <a class="btn btn-success btn-sm" href="/proyectos/@id/miembros/@usuario.Id/editar">Editar</a>
                    <button class="btn btn-danger btn-sm">Eliminar</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p>Cargando miembros...</p>
}

@code {
    [Parameter]
    public int id { get; set; }
    
    private List<Usuario>? listaDeMiembors;
    private bool yaVerifiqueSesion = false;
    
    private List<Usuario>? usuariosDisponibles;
    private int usuarioSeleccionadoId;
    private Proyecto? proyecto;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !yaVerifiqueSesion)
        {
            bool isUserActive = await SessionLogic.isUserActive();
            if (!isUserActive)
            {
                NavigationManager.NavigateTo($"/proyectos/{id}/miembros");
            }
            else
            {
                listaDeMiembors = BaseDeDatos.buscarProyectoPorId(id).Miembros;
                StateHasChanged(); 
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        bool isUserActive = await SessionLogic.isUserActive();
        if (!isUserActive)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        proyecto = BaseDeDatos.buscarProyectoPorId(id);
        listaDeMiembors = proyecto.Miembros;

        ActualizarUsuariosDisponibles();
    }

    private void ActualizarUsuariosDisponibles()
    {
        usuariosDisponibles = BaseDeDatos.ListaUsuarios
            .Where(u => !proyecto.Miembros.Contains(u))
            .ToList();

        if (usuariosDisponibles.Any())
        {
            usuarioSeleccionadoId = usuariosDisponibles.First().Id;
        }
    }

    private void AgregarMiembro()
    {
        Usuario usuario = BaseDeDatos.buscarUsuarioPorId(usuarioSeleccionadoId);
        if (usuario is not null && proyecto is not null)
        {
            try
            {
                proyecto.agregarMiembro(usuario);
                ActualizarUsuariosDisponibles();
                StateHasChanged();
            }
            catch (ArgumentException ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        }
    }
}