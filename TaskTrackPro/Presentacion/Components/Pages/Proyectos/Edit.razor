@page "/proyectos/{id:int}/editar/"

<PageTitle>Editar Proyecto</PageTitle>

@using Domain
@using UserInterface.Data
@inject DB DataBase
@inject NavigationManager NavigationManager
@inject SessionLogic SessionLogic

<h1>Editar Proyecto: @nombre</h1>

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger">@mensajeError</div>
}

<form onsubmit="return false">
    <div class="form-group">
        <label for="desc">Descripción</label>
        <input type="text" class="form-control" id="desc" @bind="descripcionNueva">
    </div>

    <div class="form-group">
        <label for="fecha">Fecha De Inicio</label>
        <input type="date" class="form-control" id="fecha" @bind="fechaNueva">
    </div>

    <div class="form-group">
        <label for="admin">Administrador (correo)</label>
        <input type="email" class="form-control" id="admin" @bind="correoAdminNuevo">
    </div>


    <input type="submit" class="btn btn-primary" value="Guardar cambios" @onclick="GuardarCambios">
</form>

@code {
    [Parameter]
    public int id { get; set; }

    private string nombre;
    private string descripcionNueva;
    private DateTime fechaNueva;
    private string correoAdminNuevo;
    private Usuario adminNuevo;
    private string mensajeError;

    private Proyecto proyectoACambiar;

    private bool yaVerifiqueSesion = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!yaVerifiqueSesion)
        {
            yaVerifiqueSesion = true;

            var activo = await SessionLogic.isUserActive();
            if (!activo)
            {
                NavigationManager.NavigateTo("/Login");
                return;
            }

            try
            {
                proyectoACambiar = DataBase.buscarProyectoPorId(id);
                if (proyectoACambiar == null)
                {
                    mensajeError = "Proyecto no encontrado.";
                    return;
                }

                adminNuevo = proyectoACambiar.Admin;
                nombre = proyectoACambiar.Nombre;
                descripcionNueva = proyectoACambiar.Descripcion;
                fechaNueva = proyectoACambiar.FechaInicio;
                correoAdminNuevo = adminNuevo.Email;
            }
            catch (Exception ex)
            {
                mensajeError = ex.Message;
            }

            StateHasChanged();
        }
    }

    private void GuardarCambios()
    {
        try
        {
            if (adminNuevo.Email != correoAdminNuevo && DataBase.buscarUsuarioPorCorreo(correoAdminNuevo) != null)
            {
                proyectoACambiar.Admin = DataBase.buscarUsuarioPorCorreo(correoAdminNuevo);
            }
            proyectoACambiar.Modificar(descripcionNueva, fechaNueva);
            NavigationManager.NavigateTo("/proyectos");
        }
        catch (Exception ex)
        {
            mensajeError = ex.Message;
        }
    }
}
