@page "/proyectos/{idProyecto:int}/ruta_critica"
@using Controllers
@using DTOs
@using UserInterface.Data
@inject ProyectoController ProyectoController
@inject TareaController TareaController
@inject SessionLogic SessionLogic
@inject NavigationManager NavigationManager

<h1>Ruta Crítica del Proyecto</h1>

@if (!string.IsNullOrEmpty(mensajeError))
{
    <div class="alert alert-danger">@mensajeError</div>
}
else if (proyectoConRutaCalculada != null)
{
    @if (proyectoConRutaCalculada.FinEstimado != null)
    {
        <h2 class="text-primary">
            Fin estimado: @proyectoConRutaCalculada.FinEstimado
        </h2>

        <h3 class="mt-4 text-danger">Tareas Críticas</h3>
        <table class="table table-bordered">
            <thead class="table-danger">
            <tr>
                <th>Nombre</th>
                <th>Inicio</th>
                <th>Fin</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var t in tareasCriticas)
            {
                <tr>
                    <td>@t.Titulo</td>
                    <td>@t.EarlyStart</td>
                    <td>@t.EarlyFinish</td>
                </tr>
            }
            </tbody>
        </table>

        <h3 class="mt-4 text-primary">Tareas No Críticas</h3>
        <table class="table table-bordered table-striped">
            <thead class="table-primary text-white">
            <tr>
                <th>Nombre</th>
                <th>Inicio</th>
                <th>Fin</th>
                <th>Holgura (h)</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var t in tareasNoCriticas)
            {
                <tr>
                    <td>@t.Titulo</td>
                    <td>@t.EarlyStart</td>
                    <td>@t.EarlyFinish</td>
                    <td>@t.Holgura</td>
                </tr>
            }
            </tbody>
        </table>

        <h3 class="mt-5">Diagrama de Gantt</h3>
        <table class="table table-sm table-bordered">
            <thead>
            <tr>
                <th>Tarea</th>
                @for (int d = 0; d < diasTotales; d++)
                {
                    <th style="font-size:small">
                        @inicioProyecto.AddDays(d).ToString("dd/MM")
                    </th>
                }
            </tr>
            </thead>
            <tbody>
            @foreach (TareaDTO t in tareasDelDiagrama)
            {
                <tr>
                    <td>@t.Titulo</td>
                    @for (int d = 0; d < diasTotales; d++)
                    {
                        var día = inicioProyecto.AddDays(d);
                        bool enRango = día.Date.AddDays(1) > t.EarlyStart && día.Date <= t.EarlyFinish;
                        string celdaClass = enRango
                            ? (t.EsCritica ? "bg-danger text-white" : "bg-primary text-white")
                            : "";
                        <td class="@celdaClass"></td>
                        ;
                    }
                </tr>
            }
            </tbody>
        </table>
    }
    else
    {
        <p>Este proyecto no tiene tareas.</p>
    }
}
else
{
    <p>Cargando...</p>
}

@code {
    [Parameter] public int idProyecto { get; set; }

    private ProyectoDTO? proyectoDto;
    private ProyectoDTO proyectoConRutaCalculada;
    private List<TareaDTO> tareasCriticas = new();
    private List<TareaDTO> tareasNoCriticas = new();
    private List<TareaDTO> tareasDelDiagrama = new();
    private DateTime inicioProyecto;
    private int diasTotales;
    private string mensajeError = string.Empty;
    private bool yaVerifiqué = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!yaVerifiqué)
        {
            yaVerifiqué = true;
            if (!await SessionLogic.IsUserActive())
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            try
            {
                proyectoDto = ProyectoController.BuscarProyectoPorId(idProyecto);
                inicioProyecto = proyectoDto.FechaInicio;

                tareasCriticas = ProyectoController.ObtenerRutaCritica(idProyecto);
                tareasNoCriticas = ProyectoController.TareasNoCriticas(idProyecto);
                tareasDelDiagrama = ProyectoController.TareasOrdenadasPorInicio(idProyecto); 
                proyectoConRutaCalculada = ProyectoController.BuscarProyectoPorId(idProyecto);
                DateTime fin = proyectoConRutaCalculada!.FinEstimado!.Value.Date;
                DateTime inicio = proyectoConRutaCalculada.FechaInicio.Date;

                TimeSpan duracionTotal = fin - inicio;
                diasTotales = (int)duracionTotal.TotalDays + 1;
                
                proyectoDto.FinEstimado = fin;
                proyectoDto.FechaInicio = inicio;

            }
            catch (Exception ex)
            {
                mensajeError = ex.Message;
            }

            StateHasChanged();
        }
    }

}
